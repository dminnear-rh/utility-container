name: Build (amd64 and arm64) and push to quay registries

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

  repository_dispatch:
    types: [dependency-updated]

env:
  CONTAINER: utility-container:latest

jobs:
  test:
    uses: ./.github/workflows/container-test.yml

  build-container:
    # needs: [test]
    strategy:
      matrix:
        include:
          - targetarch: amd64
            runner: ubuntu-latest
          - targetarch: arm64
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install buildah
        run: |
          sudo apt-get update -y && sudo apt-get install -y --no-install-recommends buildah
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Build and save tarball
        run: |
          make ${{ matrix.targetarch }}
          buildah push "$TAG" "docker-archive:/tmp/image-${{ matrix.targetarch }}.tar:$TAG"
        env:
          TAG: ${{ env.CONTAINER }}-${{ matrix.targetarch }}

      # Upload image as artifact
      - name: Upload image artifact
        # if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.targetarch }}-${{ github.run_id }}
          path: /tmp/image-${{ matrix.targetarch }}.tar
          retention-days: 1

  # create-multiarch-manifest:
  #   needs: [build-container]
  #   if: github.event_name != 'pull_request'
  #   strategy:
  #     matrix:
  #       include:
  #         - image_name: validatedpatterns/utility-container
  #           username_secret: QUAY_USERNAME
  #           password_secret: QUAY_PASSWORD
  #         - image_name: hybridcloudpatterns/utility-container
  #           username_secret: LEGACY_QUAY_USERNAME
  #           password_secret: LEGACY_QUAY_PASSWORD

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     # This is used to complete the identity challenge
  #     # with sigstore/fulcio when running outside of PRs.
  #     id-token: write

  #   steps:
  #     # Download image artifacts
  #     - name: Download AMD64 image
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: image-amd64-${{ github.run_id }}
  #         path: /tmp/

  #     - name: Download ARM64 image
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: image-arm64-${{ github.run_id }}
  #         path: /tmp/

  #     - name: Install buildah
  #       run: |
  #         set -euo pipefail
  #         sudo apt-get update -y
  #         sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  #           buildah

  #     - name: Load tarballs into local containers-storage
  #       run: |
  #         set -euo pipefail
  #         buildah pull docker-archive:/tmp/image-amd64.tar
  #         buildah pull docker-archive:/tmp/image-arm64.tar
  #         OLD_IMAGE_BASE="${{ env.REGISTRY }}/${{ env.QUAY_IMAGE_NAME }}"
  #         NEW_IMAGE_BASE="${{ env.REGISTRY }}/${{ matrix.image_name }}"
  #         buildah tag "${OLD_IMAGE_BASE}:build-${{ github.run_id }}-amd64" "${NEW_IMAGE_BASE}:build-${{ github.run_id }}-amd64"
  #         buildah tag "${OLD_IMAGE_BASE}:build-${{ github.run_id }}-arm64" "${NEW_IMAGE_BASE}:build-${{ github.run_id }}-arm64"

  #     # Install the cosign tool
  #     # https://github.com/sigstore/cosign-installer
  #     - name: Install cosign
  #       uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
  #       with:
  #         cosign-release: "v2.2.4"

  #     - name: Log into registry ${{ env.REGISTRY }} with buildah
  #       env:
  #         REGISTRY: ${{ env.REGISTRY }}
  #         USERNAME: ${{ secrets[matrix.username_secret] }}
  #         PASSWORD: ${{ secrets[matrix.password_secret] }}
  #       run: |
  #         set -euo pipefail
  #         buildah login -u "$USERNAME" -p "$PASSWORD" "$REGISTRY"

  #     - name: Create manifest and push with buildah (no intermediate pushes)
  #       id: manifest-push
  #       run: |
  #         set -euo pipefail
  #         IMAGE_BASE="${{ env.REGISTRY }}/${{ matrix.image_name }}"
  #         MANIFEST_NAME="${IMAGE_BASE}:manifest-${{ github.run_id }}"
  #         buildah manifest rm "$MANIFEST_NAME" || true
  #         buildah manifest create "$MANIFEST_NAME"
  #         buildah manifest add "$MANIFEST_NAME" "${IMAGE_BASE}:build-${{ github.run_id }}-amd64"
  #         buildah manifest add "$MANIFEST_NAME" "${IMAGE_BASE}:build-${{ github.run_id }}-arm64"

  #     # Extract metadata for multi-arch manifest
  #     - name: Extract Docker metadata for manifest
  #       id: meta
  #       uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
  #         flavor: |
  #           latest=${{ github.ref == 'refs/heads/main' }}

  #     - name: Tag and push manifest to final tags
  #       id: push-manifest
  #       run: |
  #         set -euo pipefail
  #         IMAGE_BASE="${{ env.REGISTRY }}/${{ matrix.image_name }}"
  #         TAGS="${{ steps.meta.outputs.tags }}"
  #         MANIFEST_NAME="${IMAGE_BASE}:manifest-${{ github.run_id }}"
  #         DIGEST_FILE=/tmp/manifest.digest
  #         FIRST=true
  #         for TAG in $TAGS; do
  #           echo "Pushing manifest to: $TAG"
  #           if [ "$FIRST" = true ]; then
  #             buildah manifest push --all --digestfile "$DIGEST_FILE" "$MANIFEST_NAME" "docker://$TAG"
  #             FIRST=false
  #           else
  #             buildah manifest push --all "$MANIFEST_NAME" "docker://$TAG"
  #           fi
  #         done
  #         echo "digest=$(cat $DIGEST_FILE)" >> "$GITHUB_OUTPUT"

  #     # Sign the resulting Docker image digest
  #     # This will only write to the public Rekor transparency log when the Docker
  #     # repository is public to avoid leaking data.  If you would like to publish
  #     # transparency data even for private images, pass --force to cosign below.
  #     # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       env:
  #         # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
  #         TAGS: ${{ steps.meta.outputs.tags }}
  #         DIGEST: ${{ steps.push-manifest.outputs.digest }}
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: echo "${TAGS}" | xargs -I "{}" cosign sign --yes "{}@${DIGEST}"
