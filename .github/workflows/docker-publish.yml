---
name: Docker build and push to quay
permissions: read-all

on:
  push:
    branches: ['main']
    tags: ['v*.*.*']

env:
  REGISTRY: quay.io

jobs:
  build-container-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: hybridcloudpatterns/utility-container
            username_secret: LEGACY_QUAY_USERNAME
            password_secret: LEGACY_QUAY_PASSWORD
          - name: validatedpatterns/utility-container
            username_secret: QUAY_USERNAME
            password_secret: QUAY_PASSWORD
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets[matrix.image.username_secret] }}
          password: ${{ secrets[matrix.image.password_secret] }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image.name }}

      # Build amd64 image (no push)
      - name: Build amd64 Docker image
        id: build-amd64
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: Containerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}-amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TARGETARCH=amd64
            ALTTARGETARCH=x86_64
            OPTTARGETARCH=
            EXTRARPMS=

      # Build arm64 image (no push)
      - name: Build arm64 Docker image
        id: build-arm64
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: Containerfile
          platforms: linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}-arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TARGETARCH=arm64
            ALTTARGETARCH=aarch64
            OPTTARGETARCH=arm64-
            EXTRARPMS=gcc python3-devel glibc-devel libxcrypt-devel

      # Push combined multi-arch manifest as single tag
      - name: Push multi-arch manifest
        id: manifest
        run: |
          docker buildx imagetools create \
            --tag "${{ steps.meta.outputs.tags }}" \
            "${{ steps.meta.outputs.tags }}-amd64" \
            "${{ steps.meta.outputs.tags }}-arm64"
          # Get the digest of the created manifest
          DIGEST=$(docker buildx imagetools inspect "${{ steps.meta.outputs.tags }}" --format '{{.Manifest.Digest}}')
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

      # Sign the resulting Docker image digest.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.manifest.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I "{}" cosign sign --yes "{}@${DIGEST}"
